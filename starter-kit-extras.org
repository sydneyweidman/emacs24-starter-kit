#+TITLE: Starter Kit Extras
#+OPTIONS: toc:nil num:nil ^:nil
* Export configuration
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "$ORG_HOME/contrib/lisp")
  (require 'ox)
  (require 'ox-ascii)
  (require 'ox-beamer)
  (require 'ox-html)
  (require 'ox-icalendar)
  (require 'ox-latex)
  (require 'ox-man)
  (require 'ox-md)
  (require 'ox-odt)
  (require 'ox-publish)
  (require 'ox-texinfo)
  (require 'ox-deck)
  (require 'ox-groff)
  (require 'ox-rss)
  (require 'ox-s5)
#+END_SRC
* Basics
#+BEGIN_SRC emacs-lisp
  (starter-kit-load "eshell")
  (starter-kit-load "js")
  (starter-kit-load "lisp")
  (starter-kit-load "misc-recommended")
  (starter-kit-load "ox")
  (starter-kit-load "org")
  (starter-kit-load "python")
#+END_SRC
* Font-lock mode
Set font-lock mode

#+BEGIN_SRC emacs-lisp
;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))
(setq font-lock-maximum-decoration t)
#+END_SRC

* org-mode enhancements
Add some speed keys etc to org-mode:

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only
; I prefer return to activate a link
(setq org-return-follows-link t)
; Let org help me catch invisible edits
(setq org-catch-invisible-edits t)
; Don't output xml validation during html export
(setq org-export-html-validation-link nil)
; Set up capture
(setq org-default-notes-file (concat org-directory "~/org/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)
; Org speed commands
(setq org-use-speed-commands t)
(setq org-agenda-custom-commands
    '(("w" todo "WAITING" nil)
      ("n" todo "NEXT" nil)
      ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))
(setq org-clock-persist 'history)
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
; Clocktable formatting
(setq org-time-clocksum-format
      (quote (:hours "%d"
                     :require-hours t
                     :minutes ":%02d"
                     :require-minutes t)))
; Refile targets
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 4))))
(setq org-refile-use-outline-path t)
#+END_SRC

* Default frame alist
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Monospace-16")(width . 95)))
#+END_SRC

>>>>>>> 505bb85b517bc915fa38e3098e0ad6dde900ba6f
* Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (ditaa . t)
     (sql .t)
     (js . t)
     (css . t)))
#+END_SRC

This line should preserve indentation for Python and allow native
fontification.

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+END_SRC

* Copy and Paste from clipboard
Allow copying from Xwindow clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

* ANSI colour mode for shell
Turn on ansi color mode for emacs shell.

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

* eshell initialization

#+BEGIN_SRC emacs-lisp
(setq eshell-output-filter-functions '())
#+END_SRC

* Electric Pairs
Install electric pairs for Python Mode. This snippet seems to work
when I do "eval-region", but does not load during starter-kit load.

#+BEGIN_SRC emacs-lisp
;;; Electric Pairs
(add-hook 'python-mode-hook
     (lambda ()
      (define-key python-mode-map "\"" 'electric-pair)
      (define-key python-mode-map "\'" 'electric-pair)
      (define-key python-mode-map "(" 'electric-pair)
      (define-key python-mode-map "[" 'electric-pair)
      (define-key python-mode-map "{" 'electric-pair)))
(defun electric-pair ()
  "Insert character pair without surrounding spaces"
  (interactive)
  (let (parens-require-spaces)
    (insert-pair)))
#+END_SRC

* Better Defaults
Based on http://www.pybloggers.com/emacs-the-best-python-editor/

#+BEGIN_SRC emacs-lisp

;; init.el --- Emacs configuration

;; INSTALL PACKAGES
;; --------------------------------------

(require 'package)

(add-to-list 'package-archives
       '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages
  '(better-defaults
    elpy
    material-theme))

(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)

;; BASIC CUSTOMIZATION
;; --------------------------------------

(setq inhibit-startup-message t) ;; hide the startup message
(load-theme 'material t) ;; load material theme

;; init.el ends here
#+END_SRC
* Elpy
#+BEGIN_SRC emacs-lisp
(require 'elpy)
(elpy-enable)
#+END_SRC

* Company mode
#+BEGIN_SRC emacs-lisp
(require 'company)

(add-hook 'org-mode-hook
          (lambda ()
            (setq-local company-backends '((company-files company-dabbrev)))))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq-local company-backends '((company-capf company-dabbrev-code)))))

(add-hook 'python-mode-hook
          (lambda ()
            (setq-local company-backends '((company-capf company-jedi company-dabbrev-code company-files)))))
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
* Flymake

Turns on flymake in python-mode

#+BEGIN_SRC emacs-lisp
;; flymake
(when (load "flymake" t) 
 (defun flymake-pyflakes-init () 
 (let* ((temp-file (flymake-init-create-temp-buffer-copy 
 'flymake-create-temp-inplace)) 
 (local-file (file-relative-name 
 temp-file 
 (file-name-directory buffer-file-name)))) 
 (list "pyflakes" (list local-file)))) 
 
 (add-to-list 'flymake-allowed-file-name-masks 
 '("\\.py\\'" flymake-pyflakes-init))) 

;; flymake error display enhancements
(require 'flymake-cursor)

;; turn on flymake for python mode
(add-hook 'python-mode-hook 'flymake-mode-on)
#+END_SRC
* Skip
:PROPERTIES:
:header-args: :tangle no
:END:
** org-mode enhancements
Add some speed keys etc to org-mode:

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only
; I prefer return to activate a link
(setq org-return-follows-link t)
; Let org help me catch invisible edits
(setq org-catch-invisible-edits t)
; Don't output xml validation during html export
(setq org-export-html-validation-link nil)
; Set up capture
(setq org-default-notes-file (concat org-directory "~/org/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)
; Org speed commands
(setq org-use-speed-commands t)
(setq org-agenda-custom-commands
    '(("w" todo "WAITING" nil)
      ("n" todo "NEXT" nil)
      ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))
(setq org-clock-persist 'history)
(setq org-clock-persist t)
(org-clock-persistence-insinuate)

; Org Export suppress "validate" link
(setq org-html-validation-link nil)
#+END_SRC

** Auto-complete
Add auto-complete functionality.

#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)

(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(global-auto-complete-mode t)
(ac-config-default)
#+END_SRC

** rope, ropemacs, Pymacs

  See [[http://milkbox.net/note/installing-pymacs-rope-on-emacs-24/][instructions for installing]]

#+BEGIN_SRC shell
pip install rope ropemacs
pip install -e "git+https://github.com/pinard/Pymacs.git#egg=Pymacs"
cd $VIRTUAL_ENV/src/pymacs
make
# Pymacs.el
cd $HOME/elisp
git clone https://github.com/pinard/Pymacs.git
#+END_SRC

#+BEGIN_SRC emacs-lisp
(push (concat (getenv "VIRTUAL_ENV") "/bin") exec-path)
(setenv "PATH"
        (concat
         (concat (getenv "VIRTUAL_ENV") "/bin") ":"
         (getenv "PATH")
         ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ac-ropemacs-initialize)
(add-to-list 'load-path (concat (getenv "VIRTUAL_ENV") "/src/pymacs"))
(ac-ropemacs-setup)
(add-to-list 'ac-sources 'ac-source-ropemacs)
#+END_SRC
** jedi
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat starter-kit-dir "/emacs-python-environment"))
(add-to-list 'load-path (concat starter-kit-dir "/emacs-jedi"))
(require 'python-environment)
(require 'jedi)
;; Standard Jedi.el setting
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
#+END_SRC

** Anything

Anything http://www.emacswiki.org/emacs/download/anything.el

#+BEGIN_SRC emacs-lisp
(require 'anything-config)
(require 'anything-match-plugin)
(global-set-key "\C-cs" 'anything)
(global-set-key "\C-ce" 'anything-for-files)
#+END_SRC

** pylookup
For looking up python stuff in the html docs.

#+BEGIN_SRC emacs-lisp
;; pylookup: Python documentation indexer
(setq pylookup-dir (concat starter-kit-dir "/pylookup"))
(add-to-list 'load-path pylookup-dir)

;; load pylookup when compile time
(eval-when-compile (require 'pylookup))

;; set executable file and db file
(setq pylookup-program (concat pylookup-dir "/pylookup.py"))
(setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))

;; set search option if you want
;; (setq pylookup-search-options '("--insensitive" "0" "--desc" "0"))

;; to speedup, just load it on demand
(autoload 'pylookup-lookup "pylookup"
  "Lookup SEARCH-TERM in the Python HTML indexes." t)

(autoload 'pylookup-update "pylookup"
  "Run pylookup-update and create the database at `pylookup-db-file'." t)
(global-set-key "\C-ch" 'pylookup-lookup)
#+END_SRC

#+RESULTS:
: pylookup-lookup

* Expand region

  - https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
;; Expand region
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
* Turn menu-bar on
#+BEGIN_SRC emacs-lisp 
  (menu-bar-mode 1)
#+END_SRC
* Elpy and Better Defaults
#+BEGIN_SRC emacs-lisp
  ;; INSTALL PACKAGES
  ;; --------------------------------------

  (require 'package)

  (add-to-list 'package-archives
         '("melpa" . "http://melpa.org/packages/") t)

  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

  (defvar myPackages
    '(better-defaults
      elpy
      flycheck
      material-theme
      py-autopep8))

  (mapc #'(lambda (package)
      (unless (package-installed-p package)
        (package-install package)))
        myPackages)

  ;; BASIC CUSTOMIZATION
  ;; --------------------------------------

  (setq inhibit-startup-message t) ;; hide the startup message
  (load-theme 'material t) ;; load material theme

  ;; PYTHON CONFIGURATION
  ;; --------------------------------------

  (elpy-enable)
  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
  (setq elpy-rpc-backend "jedi")
#+END_SRC

* Save history
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC
