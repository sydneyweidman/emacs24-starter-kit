#+TITLE: Starter Kit Extras
#+OPTIONS: toc:nil num:nil ^:nil
* Basics
#+BEGIN_SRC emacs-lisp
  (starter-kit-load "eshell")
  (starter-kit-load "js")
  (starter-kit-load "lisp")
  (starter-kit-load "misc-recommended")
  (starter-kit-load "ox")
  (starter-kit-load "org")
#+END_SRC
* Font-lock mode
Set font-lock mode

#+BEGIN_SRC emacs-lisp
;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))
(setq font-lock-maximum-decoration t)
#+END_SRC

* org-mode enhancements
Add some speed keys etc to org-mode:

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only
; I prefer return to activate a link
(setq org-return-follows-link t)
; Let org help me catch invisible edits
(setq org-catch-invisible-edits t)
; Don't output xml validation during html export
(setq org-export-html-validation-link nil)
; Set up capture
(setq org-default-notes-file (concat org-directory "~/org/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)
; Org speed commands
(setq org-use-speed-commands t)
(setq org-agenda-custom-commands
    '(("w" todo "WAITING" nil)
      ("n" todo "NEXT" nil)
      ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))
(setq org-clock-persist 'history)
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
; Clocktable formatting
(setq org-time-clocksum-format
      (quote (:hours "%d"
                     :require-hours t
                     :minutes ":%02d"
                     :require-minutes t)))
; Refile targets
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 4))))
(setq org-refile-use-outline-path t)
#+END_SRC

* Default frame alist
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Monospace-16")(width . 95)))
#+END_SRC

* Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (ditaa . t)
     (sql .t)
     (js . t)
     (css . t)))
#+END_SRC

This line should preserve indentation for Python and allow native
fontification.

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+END_SRC

* Copy and Paste from clipboard
Allow copying from Xwindow clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

* ANSI colour mode for shell
Turn on ansi color mode for emacs shell.

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

* eshell initialization

#+BEGIN_SRC emacs-lisp
(setq eshell-output-filter-functions '())
#+END_SRC

* Use unified diffs
Default to unified diffs

#+BEGIN_SRC emacs-lisp
(setq diff-switches "-u")
#+END_SRC
* Set browser
Use firefox

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
* Electric Pairs
Install electric pairs for Python Mode. This snippet seems to work
when I do "eval-region", but does not load during starter-kit load.

#+BEGIN_SRC emacs-lisp
;;; Electric Pairs
(add-hook 'python-mode-hook
     (lambda ()
      (define-key python-mode-map "\"" 'electric-pair)
      (define-key python-mode-map "\'" 'electric-pair)
      (define-key python-mode-map "(" 'electric-pair)
      (define-key python-mode-map "[" 'electric-pair)
      (define-key python-mode-map "{" 'electric-pair)))
(defun electric-pair ()
  "Insert character pair without surrounding spaces"
  (interactive)
  (let (parens-require-spaces)
    (insert-pair)))
#+END_SRC
* Expand region

  - https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
;; Expand region
(starter-kit-install-if-needed 'expand-region)
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
* Turn menu-bar on
#+BEGIN_SRC emacs-lisp 
  (menu-bar-mode 1)
#+END_SRC
* Elpy and Better Defaults
#+BEGIN_SRC emacs-lisp
 (require 'package)

 (setq package-archives '())
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
 (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
 (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)

;; (package-refresh-contents)

 (package-initialize)

  (when (not package-archive-contents)
    (package-refresh-contents))

  (defvar myPackages
    '(better-defaults
      elpy
      flycheck
      material-theme
      py-autopep8))

  (mapc #'(lambda (package)
      (unless (package-installed-p package)
        (package-install package)))
        myPackages)

  ;; BASIC CUSTOMIZATION
  ;; --------------------------------------

  (setq inhibit-startup-message t) ;; hide the startup message
  (load-theme 'material t) ;; load material theme

  ;; PYTHON CONFIGURATION
  ;; --------------------------------------

  (elpy-enable)
  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
  (setq elpy-rpc-backend "jedi")
  (setq python-shell-interpreter "ipython")
#+END_SRC
* El-get

#+BEGIN_SRC emacs-lisp :results none
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
#+END_SRC
* Pymacs and rope

#+BEGIN_SRC emacs-lisp :results none
;; Pymacs
(add-to-list 'load-path "/usr/share/emacs/site-lisp/pymacs")

(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")

(require 'pymacs)

(pymacs-load "ropemacs" "rope-")
(setq ropemacs-confirm-saving 'nil)

#+END_SRC
* company mode
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (starter-kit-install-if-needed 'company-anaconda)
  (require 'company-anaconda)
  (global-company-mode)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

* Save history
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC

