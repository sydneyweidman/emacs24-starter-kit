#+TITLE: Sydney Weidman's Dotemacs
#+OPTIONS: toc:nil num:nil ^:nil

* Flymake

Turns on flymake in python-mode

#+begin_src emacs-lisp
;; flymake
(when (load "flymake" t) 
 (defun flymake-pyflakes-init () 
 (let* ((temp-file (flymake-init-create-temp-buffer-copy 
 'flymake-create-temp-inplace)) 
 (local-file (file-relative-name 
 temp-file 
 (file-name-directory buffer-file-name)))) 
 (list "pyflakes" (list local-file)))) 
 
 (add-to-list 'flymake-allowed-file-name-masks 
 '("\\.py\\'" flymake-pyflakes-init))) 

;; flymake error display enhancements
(require 'flymake-cursor)

;; turn on flymake for python mode
(add-hook 'python-mode-hook 'flymake-mode-on)
#+end_src
* Electric Pairs
Install electric pairs for Python Mode. This snippet seems to work
when I do "eval-region", but does not load during starter-kit load.

#+begin_src emacs-lisp
;;; Electric Pairs
(add-hook 'python-mode-hook
     (lambda ()
      (define-key python-mode-map "\"" 'electric-pair)
      (define-key python-mode-map "\'" 'electric-pair)
      (define-key python-mode-map "(" 'electric-pair)
      (define-key python-mode-map "[" 'electric-pair)
      (define-key python-mode-map "{" 'electric-pair)))
(defun electric-pair ()
  "Insert character pair without surrounding spaces"
  (interactive)
  (let (parens-require-spaces)
    (insert-pair)))
#+end_src
* Font size

#+begin_src emacs-lisp
(set-default-font "Monospace-12")
#+end_src

* Font-lock mode
Set font-lock mode

#+begin_src emacs-lisp
;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))
(setq font-lock-maximum-decoration t)
#+end_src

* starter-kit load
Load some starter-kit files

#+begin_src emacs-lisp
(setq ipython-command "/usr/local/bin/ipython")
(setq py-python-command "/usr/local/bin/ipython")
(yas/load-directory (expand-file-name "snippets" "~/.emacs.d/"))
(starter-kit-load "org")
(starter-kit-load "misc-recommended")
(starter-kit-load "misc")
(starter-kit-load "python")
(starter-kit-load "eshell")
#+end_src

* org-mode enhancements
Add some speed keys etc to org-mode:

#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only
(setq org-link-abbrev-alist
      '(("sysgeneral" . "https://serenity.uwinnipeg.ca/projects/env/ticket/")
	("cybrary3"   . "https://serenity.uwinnipeg.ca/projects/cybrary3/ticket/")
	("ir"         . "https://serenity.uwinnipeg.ca/projects/ir/ticket/")
	("librarycat" . "https://serenity.uwinnipeg.ca/projects/librarycat/ticket/")
	("journals"   . "https://serenity.uwinnipeg.ca/projects/journals/ticket/")
	("sakaitrac"  . "https://serenity.uwinnipeg.ca/projects/ir/ticket/")
	("pubwrkstns" . "https://serenity.uwinnipeg.ca/projects/libpubwrkstns/ticket/")))
; I prefer return to activate a link
(setq org-return-follows-link t)
; Org speed commands
(setq org-use-speed-commands t)
(setq org-agenda-custom-commands
    '(("w" todo "WAITING" nil)
      ("n" todo "NEXT" nil)
      ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))
(setq org-agenda-files '("~/org/journal.org" "~/org/birthdays.org"
"~/org/absences.org" "~/org/notes.org" "~/org/someday.org"
"~/org/gtd.org" "~/org/work.org" "~/org/personal.org"
"~/org/health.org"))
#+end_src

* Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (python . t)))
#+END_SRC

This line should preserve indentation for Python and allow native
fontification.

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+END_SRC


* Copy and Paste from clipboard
Allow copying from Xwindow clipboard

#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src

* ANSI colour mode for shell
Turn on ansi color mode for emacs shell.

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

* Use unified diffs
Default to unified diffs

#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src
* Auto-complete
Add auto-complete functionality.

#+begin_src emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)

(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(global-auto-complete-mode t)
(ac-config-default)
#+end_src
* Anything

Anything http://www.emacswiki.org/emacs/download/anything.el

#+BEGIN_SRC emacs-lisp
(require 'anything-config)
(require 'anything-match-plugin)
(global-set-key "\C-cs" 'anything)
(global-set-key "\C-ce" 'anything-for-files)
#+END_SRC

* Pymacs and Rope
For automating emacs via Python and for Python code refactoring, code
assist, etc.

#+BEGIN_SRC emacs-lisp
;; Add pymacs dir to load-path
(add-to-list 'load-path "~/working/uw/src")
(progn (cd "~/working/uw/src")
       (normal-top-level-add-subdirs-to-load-path))
(progn (cd "~/"))

;; Initialize Pymacs
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)

;; Initialize Rope
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)
(setq ropemacs-autoimport-modules '("os" "os.path"))

;; Configure auto-complete for rope
(ac-ropemacs-setup)
#+END_SRC
* pylookup
For looking up python stuff in the html docs.

#+BEGIN_SRC emacs-lisp
;; pylookup: Python documentation indexer
(setq pylookup-dir "~/.emacs.d/vendor/pylookup")
(add-to-list 'load-path pylookup-dir)

;; load pylookup when compile time
(eval-when-compile (require 'pylookup))

;; set executable file and db file
(setq pylookup-program (concat pylookup-dir "/pylookup.py"))
(setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))

;; set search option if you want
;; (setq pylookup-search-options '("--insensitive" "0" "--desc" "0"))

;; to speedup, just load it on demand
(autoload 'pylookup-lookup "pylookup"
  "Lookup SEARCH-TERM in the Python HTML indexes." t)

(autoload 'pylookup-update "pylookup"
  "Run pylookup-update and create the database at `pylookup-db-file'." t)
(global-set-key "\C-ch" 'pylookup-lookup)
#+END_SRC
* Set browser
Use firefox

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
